---
# tasks file for mysql

# Setup/install tasks
- name: Ensure MySQL packages are installed
  apt:
    name: "{{ item }}"
    state: latest
  with_items: "{{ mysql_packages }}"

# Configuration tasks
# - name: Configure MySQL Password Lifetime
#   lineinfile:
#     dest: /etc/mysql/my.cnf
#     regexp: "default_password_lifetime\s*=.*"
#     line: "default_password_lifetime = 0"
#     state: present
#     backrefs: yes

# - name: Configure MySQL listen IP address
#   lineinfile:
#     dest: /etc/mysql/my.cnf
#     regexp: "bind-address\s*=.*"
#     line: "bind-address = {{ mysql_bind_address }}"
#     state: present
#     backrefs: yes

- name: Ensure MySQL is started to change root password
  service:
    name: mysql
    state: started

- name: Set MySQL root user password
  mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    host: "{{ item }}"
    priv: "*.*:ALL,GRANT"
    state: present
  with_items:
    - 127.0.0.1
    - ::1
    - localhost

- name: Configure MySQL for easy access as root user
  template:
    src: root-my.cnf.j2
    dest: "{{ mysql_root_home }}/.my.cnf"
    owner: root
    group: root
    mode: 0600
  notify: restart mysql

# Secure installation tasks
- name: Delete anonymous MySQL server users
  mysql_user:
    user: ""
    host: "{{ item }}"
    state: absent
  with_items:
    - localhost
    - "{{ inventory_hostname }}"
    - "{{ ansible_hostname }}"

- name: Remove the MySQL test database
  mysql_db:
    db: test
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"

# Databases tasks
- name: Ensure MySQL databases are present
  mysql_db:
    name: "{{ item.name }}"
    collation: "{{ item.collation | default('utf8_general_ci') }}"
    encoding: "{{ item.encoding | default('utf8') }}"
    state: present
  with_items: "{{ mysql_databases }}"

# Users tasks
- name: Ensure MySQL users are present
  mysql_user:
    name: "{{ item.name }}"
    host: "{{ item.host | default('localhost') }}"
    password: "{{ item.password }}"
    priv: "{{ item.priv | default('*.*:USAGE') }}"
    state: "{{ item.state | default('present') }}"
    append_privs: "{{ item.append_privs | default('no') }}"
    encrypted: "{{ item.encrypted | default('no') }}"
  with_items: "{{ mysql_users }}"
  no_log: true

# Enable tasks
- name: Ensure MySQL is started and enabled on boot
  service:
    name: mysql
    state: started
    enabled: yes

###

- name: Install MySQL
  apt: pkg={{ item }} state=latest update_cache=yes cache_valid_time={{ aptcachetime }}
  with_items:
    - mysql-server-5.7
    - mysql-client-5.7
    - python-mysqldb
    - mytop
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: Configure MySQL Password Lifetime
  lineinfile: dest=/etc/mysql/my.cnf
    regexp="default_password_lifetime\s*=.*"
    line="default_password_lifetime = 0"
    state=present
    backrefs=yes
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: Configure MySQL listen IP address
  lineinfile: dest=/etc/mysql/my.cnf
    regexp="bind-address\s*=.*"
    line="bind-address = {{ mysql.bind_address }}"
    state=present
    backrefs=yes
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: Ensure MySQL is started to change root password
  service: name=mysql state=started
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: Set MySQL root user password
  mysql_user: name=root password={{ mysql.password }} host="{{ item }}" priv=*.*:ALL,GRANT state=present
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: Configure MySQL for easy access as root user
  action: template src=root.my.cnf.j2 dest=/root/.my.cnf mode=0600
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: Remove the MySQL test database
  mysql_db: db=test state=absent login_user=root login_password={{ mysql.password }}
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: "Ensure MySQL is {{ mysql.start | ternary('started','stopped') }}"
  service: name=mysql state={{ mysql.start | ternary('restarted','stopped') }} enabled={{ mysql.service_enabled }}
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'
